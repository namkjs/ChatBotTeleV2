# async def putmoney(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user = update.message.from_user
#     money = str(update.message.text)
#     if money.isnumeric() == False:
#         await update.message.reply_text("‚ùóÔ∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá vui l√≤ng nh·∫≠p l·∫°i s·ªë ti·ªÅn: ")
#         return put_money
#     else:
#         money = int(update.message.text)
#         if money < 0:
#             await update.message.reply_text("‚ùóÔ∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá vui l√≤ng nh·∫≠p l·∫°i s·ªë ti·ªÅn: ")
#             return put_money
#         else:
#             context.user_data["money"] = update.message.text
#             result = database.query_balance_data(context.user_data["username"])
#             balance = int(result[3])
#             database.update_data(
#                 context.user_data["username"], context.user_data["money"], balance)
#             results = database.query_balance_data(
#                 context.user_data["username"])
#             balance = results[3]
#             score_gif = results[5]

#             await update.message.reply_text(f"‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng\nüí∞ V√≠ c·ªßa b·∫°n\nS·ªë t√†i kho·∫£n: {context.user_data['username']}\nS·ªë d∆∞: {balance} VND\nƒêi·ªÉm th√†nh vi√™n: {score_gif} ",
#                                             reply_markup=menu_keyboard)
#             return user_choice


# async def updatemoney(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     result = database.query_balance_data(context.user_data["username"])
#     balance = result[3]
#     await update.message.reply_text(f"S·ªë d∆∞ t√†i kho·∫£n hi·ªán t·∫°i c·ªßa b·∫°n l√†: {balance}", reply_markup=menu_keyboard)
#     return user_choice


# async def approach(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#     if update.callback_query.data == 'S·ªë t√†i kho·∫£n':
#         await query.edit_message_text("Nh·∫≠p s·ªë t√†i kho·∫£n mu·ªën chuy·ªÉn: ")
#         return confirmsend
#     elif update.callback_query.data == 'M√£ QR':
#         await query.edit_message_text("Nh·∫≠p m√£ QR: ")
#         return confirmsend_photo


# async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     global receiver
#     receiver = update.message.text
#     results = database.query_data()
#     button1 = KeyboardButton('10000')
#     button2 = KeyboardButton('20000')
#     button3 = KeyboardButton('50000')
#     button4 = KeyboardButton('100000')
#     button5 = KeyboardButton('200000')
#     button6 = KeyboardButton('500000')
#     reply_keyboard = [[button1, button2], [
#         button3, button4], [button5, button6]]
#     a = int(0)
#     for result in results:
#         if receiver == result[1]:
#             global receiver_money
#             receiver_money = result[3]
#             a = a+1
#             break
#     if a > 0:
#         await update.message.reply_text("Nh·∫≠p s·ªë ti·ªÅn mu·ªën chuy·ªÉn: ",
#                                         reply_markup=ReplyKeyboardMarkup(
#                                             reply_keyboard, resize_keyboard=True,  selective=True, one_time_keyboard=True
#                                         ),
#                                         )
#         return send_money
#     else:
#         await update.message.reply_text("T√™n ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª±c hi·ªán l·∫°i", reply_markup=menu_keyboard)
#         return user_choice


# async def confirm_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     global receiver
#     photo_file = await update.message.photo[-1].get_file()
#     await photo_file.download_to_drive("user_photo.jpg")
#     receiver = str(read_qr_code(update, context))
#     os.remove("user_photo.jpg")

#     results = database.query_data()
#     button1 = KeyboardButton('10000')
#     button2 = KeyboardButton('20000')
#     button3 = KeyboardButton('50000')
#     button4 = KeyboardButton('100000')
#     button5 = KeyboardButton('200000')
#     button6 = KeyboardButton('500000')
#     reply_keyboard = [[button1, button2], [
#         button3, button4], [button5, button6]]
#     a = int(0)
#     for result in results:
#         if receiver == result[1]:
#             global receiver_money
#             receiver_money = result[3]
#             a = a+1
#             break

#     if a > 0:
#         await update.message.reply_text("Nh·∫≠p s·ªë ti·ªÅn mu·ªën chuy·ªÉn: ",
#                                         reply_markup=ReplyKeyboardMarkup(
#                                             reply_keyboard, resize_keyboard=True,  selective=True, one_time_keyboard=True
#                                         ),
#                                         )
#         return send_money
#     else:
#         await update.message.reply_text("T√™n ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª±c hi·ªán l·∫°i", reply_markup=menu_keyboard)
#         return user_choice


# async def sendmoney(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     result = database.query_balance_data(context.user_data["username"])
#     balance = result[3]
#     money = str(update.message.text)
#     if money.isnumeric() == False:
#         await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i s·ªë ti·ªÅn: ")
#         return confirmsend
#     else:
#         money = int(update.message.text)
#     if money < 0:
#         await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i s·ªë ti·ªÅn: ")
#         return confirmsend
#     elif money > balance:
#         await update.message.reply_text("S·ªë d∆∞ trong t√†i kho·∫£n kh√¥ng kh·∫£ d·ª•ng! Vui l√≤ng n·∫°p th√™m ti·ªÅn v√† th·ª±c hi·ªán l·∫°i: ", reply_markup=menu_keyboard)
#         return confirmsend
#     else:
#         global receiver
#         database.send(context.user_data["username"], receiver,
#                       receiver_money, balance, money)
#         # trans = str(str(current_time) + ": " + str(-money))
#         # trans_receive = str(str(current_time) + ": +" + str(money))
#         day = datetime.datetime.today().strftime('%d-%m-%Y')
#         time = datetime.datetime.today().strftime('%H:%M:%S')
#         fr = context.user_data["username"]
#         print(">>> check trans: ", trans)
#         user_database = dtb1(str(context.user_data["username"]))
#         user_database.insert_user(day, time, -money, receiver)

#         user_database1 = dtb1(receiver)
#         user_database1.insert_user(day, time, money, fr)
# # create KeyboardButton objects for each line
#         results = database.query_balance_data(context.user_data["username"])
#         balance = results[3]
#         score_gif = results[5]

#         await update.message.reply_text(f"Chuy·ªÉn ti·ªÅn th√†nh c√¥ng\nüí∞ V√≠ c·ªßa b·∫°n\nS·ªë t√†i kho·∫£n c·ªßa b·∫°n l√†:{context.user_data['username']}\nS·ªë d∆∞: {balance} VND\nƒêi·ªÉm th√†nh vi√™n: {score_gif} ", reply_markup=menu_keyboard)
#         return user_choice
async def trans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_database = dtb1(str(context.user_data["username"]))
    results = user_database.query_data()
    await update.message.reply_text("Lich su giao dich la: ")
    await update.message.reply_text("           Ng√†y          |             Gi·ªù            |          Ti·ªÅn         ")
    for result in results:
        await update.message.reply_text(f'      {result[1]}     |       {result[2]}         {result[3]}')

    return user_choice