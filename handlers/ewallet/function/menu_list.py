from bot import database
from telegram.ext import *
from telegram import *
import logging
import tracemalloc
import sys
from utils.transaction import *
from models.intents import *
from ..variable import *
from models.Keyboard import *
from telegram.constants import ParseMode
import prettytable as pt

sys.path.append('...')
logger = logging.getLogger(__name__)


async def mainmenu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text(
        "Chao mung den vi dien tu cua Nam Le. Nhap lua chon cua ban: ",
        reply_markup=ReplyKeyboardMarkup(
            menu_keyboard(), resize_keyboard=False, one_time_keyboard=True
        ),
    )
    return user_choice


async def select_function(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if update.callback_query.data == 'N·∫°p ti·ªÅn':
        await query.edit_message_text("Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p: ")
        return put_money
    # elif update.callback_query.data in capnhat:
    #     result = database.query_balance_data(context.user_data["username"])
    #     balance = result[3]
    #     await update.message.reply_text(f"S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√†: {balance}")
    #     return user_choice
    elif update.callback_query.data in chuyentien:
        keyboard = [
            [
                InlineKeyboardButton(
                    "S·ªë t√†i kho·∫£n", callback_data="S·ªë t√†i kho·∫£n"),
                InlineKeyboardButton("M√£ QR", callback_data="M√£ QR"),
            ]
        ]
        approach_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Ch·ªçn h√¨nh th·ª©c nh·∫≠p: ",  reply_markup=approach_markup)
        return Approach
    elif update.callback_query.data == "R√∫t ti·ªÅn":
        await query.edit_message_text("Nh·∫≠p s·ªë ti·ªÅn mu·ªën r√∫t: ")
        return withdraw_money
    elif update.callback_query.data in lichsugiaodich:
        # user_database = dtb1(str(context.user_data["username"]))
        # results = user_database.query_data()
        # await query.message.reply_text("L·ªãch s·ª≠ giao d·ªãch: ")
        # await query.message.reply_text("           Ng√†y                |             Gi·ªù            |          Ti·ªÅn         ")
        # for result in results:
        #     await query.message.reply_text(f'      {result[1]}     |           {result[2]}     |        {result[3]}')
        menu_keyboard = InlineKeyboardMarkup(inline_keyboard_menu())
        # results = database.query_balance_data(context.user_data["username"])
        # balance = results[3]
        table = pt.PrettyTable(['Ng√†y', 'Gi·ªù', 'Ti·ªÅn'])
        table.align['Ng√†y'] = 'l'
        table.align['Gi·ªù'] = 'l'
        table.align['Ti·ªÅn'] = 'r'
        user_database = dtb1(str(context.user_data["username"]))
        results = user_database.query_data()
        await query.message.reply_text(text="<b>L·ªãch s·ª≠ giao d·ªãch l√†: </b>", parse_mode=ParseMode.HTML)
        for result in results:
            table.add_row([result[1], result[2], result[3]])
        await query.message.reply_text(
            text=f'<pre>{table}</pre>', parse_mode=ParseMode.HTML)
        results = database.query_balance_data(context.user_data["username"])
        balance = results[3]
        await query.message.reply_text(f"üí∞ V√≠ c·ªßa b·∫°n\nS·ªë t√†i kho·∫£n: {context.user_data['username']}\nS·ªë d∆∞: {balance} VND ",
                                       reply_markup=menu_keyboard)
        return user_choice
    elif update.callback_query.data == 'ƒê·ªïi qu√†':
        button1 = KeyboardButton('Th·∫ª ƒëi·ªán tho·∫°i')
        button4 = KeyboardButton('M√£ gi·∫£m gi√° Coffee')
        button2 = KeyboardButton('M√£ gi·∫£m gi√° Massage')
        button3 = KeyboardButton('Quay l·∫°i')
        menu_keyboard1 = [[button1], [button4], [button2], [button3]]
        results = database.query_balance_data(context.user_data["username"])
        await query.message.reply_text(f'ƒêi·ªÉm th√†nh vi√™n c·ªßa b·∫°n l√†: {results[5]}. Th·ª±c hi·ªán ƒë·ªïi ƒëi·ªÉm: ',  reply_markup=ReplyKeyboardMarkup(
            menu_keyboard1, resize_keyboard=False, one_time_keyboard=True))
        return score

    elif update.callback_query.data == 'C√†i ƒë·∫∑t':
        menu_setting = InlineKeyboardMarkup(keyboard_setting())
        await query.edit_message_text("Th·ª±c hi·ªán c√†i ƒë·∫∑t: ", reply_markup=menu_setting)
        return setting
    elif update.callback_query.data == 'V·ªÅ ch√∫ng t√¥i':
        photo_file = 'public/images/2.png'
        await update.message.reply_photo(photo_file)
        await update.message.reply_text('A Potato l√† m·ªôt bot v√≠ ƒëi·ªán t·ª≠ x·ª≠ c·ªßa Telegram ƒë∆∞·ª£c ph√°t tri·ªÉn v√† l√†m m√†u b·ªüi nh√≥m 4 v·ªõi CEO ƒê·ªó Hi·∫øu. ƒê·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ ch√∫ng t√¥i, c√°c b·∫°n c√≥ th·ªÉ ƒë·ªçc link sau ƒë√¢y: https://a-potato.notion.site/Hi-u-l-ai-eacb5d50b7aa4fe4a14b7cf231265aa9')
        return user_choice
    else:
        await query.edit_message_text("Da huy")
        return ConversationHandler.END
